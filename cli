#!/usr/bin/env python
# PYTHON_ARGCOMPLETE_OK


import argparse
import requests
import argcomplete
from tqdm import tqdm
from logger import logging
from argcomplete.completers import ChoicesCompleter

from utils import show_dl
from Project import Project
from data import get_dataloaders
from utils import data_download, data_preprocess
from data.transformation import train_transform, val_transform

def _args() -> argparse.Namespace:
    project = Project()
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "--run",
        help="command to run",
        type=str,
        required=True,
        nargs=1,
        choices=project.cli_commands,
    ).completer=ChoicesCompleter(project.cli_commands)
    argcomplete.autocomplete(parser)
    return parser.parse_args()


def _data_inspect(usage: str) -> None:
    train_dl, val_dl, test_dl = get_dataloaders(
        train_dir=project.data_dir / "train",
        val_dir=project.data_dir / "val",
        test_dir=project.data_dir / "test",
        val_transform=val_transform,
        train_transform=train_transform,
        batch_size=64,
        pin_memory=True,
        num_workers=4,
    )
    if usage == "train":
        show_dl(train_dl)
    elif usage == "test":
        show_dl(test_dl)
    elif usage == "val":
        show_dl(val_dl)


def _train() -> None:
    pass


def _test() -> None:
    pass


def _infere() -> None:
    pass


if __name__ == '__main__':
    args = _args()
    project = Project()

    run_cmd = args.run[0]
    if run_cmd == "data-download":
        data_download()
    elif run_cmd == "data-preprocess":
        data_preprocess(project.data_dir)
    elif run_cmd == "data-inspect-train":
        _data_inspect("train")
    elif run_cmd == "data-inspect-test":
        _data_inspect("test")
    elif run_cmd == "data-inspect-val":
        _data_inspect("val")
    elif run_cmd == "train":
        _train()
    elif run_cmd == "test":
        _test()
    elif run_cmd == "infere":
        _infere()